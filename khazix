if myHero.charName ~= "Khazix" then return end
 
local leapRange
local qRange = myHero:GetSpellData(_Q).range
local wRange = myHero:GetSpellData(_W).range
local passiveDamage
local qDmg
local wDmg
local eDmg
local VP
require "VPrediction"
require "SxOrbWalk"
local minion = {}
 
function OnLoad()
VP = VPrediction()
Config = scriptConfig("Fret's Auto Kha'zix double jump", "K6 script")
Config:addSubMenu("Combo Settings", "Combo")
Config:addSubMenu("Drawing Settings", "Drawing")
Config:addSubMenu("E Settings", "SpellE")
Config:addSubMenu("W settings","SpellW")
Config:addSubMenu("other settings","other")
Config:addSubMenu("Orbwalker", "SxOrb")
Config:addParam("Harass", "Harass", SCRIPT_PARAM_ONKEYDOWN,false, string.byte("C"))
 
        Config.Drawing:addParam("drawCircles", "Draw Circles", SCRIPT_PARAM_ONOFF, true)
        Config.Drawing:addParam("drawE", "Draw E range", SCRIPT_PARAM_ONOFF, true)
        Config.Drawing:addParam("drawW", "Draw W range", SCRIPT_PARAM_ONOFF, true)
       
        Config.SpellW:addParam("harassW", "use W to harass", SCRIPT_PARAM_ONOFF, true)
        Config.SpellW:addParam("comboW", "use W to combo", SCRIPT_PARAM_ONOFF, true)
       
        Config.other:addParam("JumpOver", "double jump", SCRIPT_PARAM_ONKEYDOWN,false, string.byte("T"))
        Config.other:addParam("Ignite", "Auto Ignite", SCRIPT_PARAM_ONOFF, true)
        Config.Combo:addParam("DoCombo", "Combo Key", SCRIPT_PARAM_ONKEYDOWN, false, string.byte(" "))
 
minions = minionManager(MINION_ENEMY, 1000, myHero, MINION_SORT_HEALTH_ASC)
 
 
enemy = GetEnemyHeroes()
SxOrb:LoadToMenu(Config.SxOrb)
 
 
print("Thanks to Hirschmilch and Sida >> Fret's AutoKhaZix v1.9 >> Good Luck")
print("AutoKhazix loaded succesfully")
ts = TargetSelector(TARGET_LOW_HP_PRIORITY,950, true)
 
if myHero:GetSpellData(SUMMONER_1).name:find("summonerdot") then ign = SUMMONER_1
        elseif myHero:GetSpellData(SUMMONER_2).name:find("summonerdot") then ign = SUMMONER_2
                else ign = nil
end
end
 
 
 
local eData = myHero:GetSpellData(_E).name
local eRange = myHero:GetSpellData(_E).range
local qData = myHero:GetSpellData(_Q).name
local wRange = myHero:GetSpellData(_W).range
local qLevel = myHero:GetSpellData(_Q).level
local wLevel = myHero:GetSpellData(_W).level
local target
 
function OnTick()
if myHero.y > 100 and CanCast(_Q) and Config.other.JumpOver and ValidTarget(target) and GetDistance(target) < qRange then
CastSpell(_Q, target)
end
Hook()
ts:update()
target = ts.target
SxOrb:ForceTarget(ts.target)
eRange = myHero:GetSpellData(_E).range
wRange = myHero:GetSpellData(_W).range
minions:update()
minion = minions
Ignite()
getItemSlot()
fHydra()
qSpam()
if Config.Combo.DoCombo then
if ValidTarget(target) and GetDistance(target) < qRange then
CastSpell(_Q, target)
end
end
if Config.other.JumpOver then
wasX = myHero.x
wasZ = myHero.z
GetJumpPos()
end
if myHero.y > 100 and Config.other.JumpOver and ValidTarget(target) then
CastSpell(_Q, target)
end
end
 
 
 
function OnDraw()
if Config.Drawing.drawCircles then
        if QCanKill(target) then
        DrawCircle(target.x,target.y,target.z,200, 0xffffff)
        end
        if ValidTarget(target) and target then
        DrawCircle(target.x,target.y,target.z,100, 0xFFFFFF)
        end
                if ValidTarget(ts.target) and ts.target then
        DrawCircle(ts.target.x,ts.target.y,ts.target.z,100, 0xFFFFFF)
        end
        if Config.Drawing.drawE then
        DrawCircle(myHero.x,myHero.y,myHero.z, eRange, 0xFFFFFF)
        end
        if Config.Drawing.drawW then
        DrawCircle(myHero.x,myHero.y,myHero.z, wRange, 0xFFFFFF)
        end
        for i=1,heroManager.iCount,1 do
                local targeta = heroManager:getHero(i)
                if ValidTarget(targeta)  and targeta.team ~= myHero.team then
                if QCanKill(targeta) == true then
                DrawCircle(targeta.x, targeta.y, targeta.z, 500, 0xFFFFFF)
                end
                if IsIsolated(targeta) and GetDistance(targeta) < eRange then
                        DrawCircle(targeta.x, targeta.y, targeta.z, 550, 0xFFFFFF)
                end
        end
        end
       
function DrawJumpPrediction(unit)
if unit ~= nil then
DrawCircle(DrawJumpPos(unit).x, myHero.y, DrawJumpPos(unit).z, 100, 0xFFFFFF)
end
end
if target ~= nil then
DrawJumpPrediction(target)
end
end
end
 
local enemy = {}
 
 
function IsIsolated(unit)
        for i, baddie in ipairs(enemy) do
                if unit ~= baddie and GetDistance(unit, baddie) < 550 then
                        return false
                end
        end
               
        for _, minion in ipairs(minions.objects) do
                if unit ~= minion and GetDistance(unit, minion) < 550 then
                        return false
                end
        end
               
        return true
end
 
function CanCast(spell)
return (myHero:CanUseSpell(spell) == READY)
end
 
function QCanKill(unit)
        if unit ~= nil then
        local qDmg -- goes up in 25, starts 70 if not isolated, else goes up in 32.5(isolated)
        if qData == "KhazixQ" then
                if IsIsolated(unit) then
                        if qLevel == 1 then
                                qDmg = (70 + 0 + (myHero.totalDamage / 100 * 44))
                        else
                                qDmg = (70 + (25*qLevel) + (myHero.totalDamage / 100 * 104))
                        end    
                else
                        if qLevel == 1 then
                                qDmg = (70 + 0)
                        else
                                qDmg = (70 + (25*qLevel))
                        end
                end    
        else
                if IsIsolated(unit) then
                        if qLevel == 1 then
                                qDmg = (70 + 0 + (myHero.totalDamage / 100 * 260)+ (10 * myHero.level))
                        else
                                qDmg = (70 + (32.5*qLevel) + (myHero.totalDamage / 100 * 260)+ (10 * myHero.level))
                        end    
                else
                        if qLevel == 1 then
                                qDmg = (70 + 0 + (10 * myHero.level))
                        else
                                qDmg = (70 + (32.5*qLevel) + (10 * myHero.level))
                        end
                end
        end
        if qDmg > unit.health then return(true) end
        end
end
 
function GetJumpPos()
        if CanCast(_E) and CanCast(_Q) then
                MyPos = Vector(myHero.x, myHero.y, myHero.z)
                EnemyPos = Vector(mousePos.x, mousePos.y, mousePos.z)
                CastPos = MyPos - (MyPos - EnemyPos):normalized() * eRange
                CastSpell(_E, CastPos.x, CastPos.z)
                DelayAction(function() CastSpell(_E, mousePos.x, mousePos.z) end, .6)
                return CastPos
        end    
end    
function DrawJumpPos(unit)
        --if CanCast(_E) and CanCast(_Q) then
                MyPos = Vector(myHero.x, myHero.y, myHero.z)
                EnemyPos = Vector(unit.x, unit.y, unit.z)
                CastPos = MyPos - (MyPos - EnemyPos):normalized() * eRange
                return CastPos
end    
 
function Ignite()
        if Config.other.Ignite and ign ~= nil and CanCast(ign) then
                local igniteDamage = 50 + 20 * myHero.level
                for i = 1, heroManager.iCount, 1 do
                        local target = heroManager:getHero(i)
                        if ValidTarget(target, 600) and target.team ~= myHero.team then
                                if igniteDamage > (target.health - 25) then
                                        CastSpell(ign, target)
                                end
                        end
                end
        end
end
local wRange = myHero:GetSpellData(_W).range
function Hook()
        if Config.Combo.DoCombo and ValidTarget(ts.target, wRange)  and ts.target then
                local CastPosition, HitChance, Position = VP:GetLineCastPosition(ts.target, 0, 60, wRange, 1100, myHero, true)
                if HitChance >= 1 and GetDistance(ts.target) <= wRange then
                        CastSpell(_W, CastPosition.x, CastPosition.z)
                        end    
                elseif Config.Harass and ValidTarget(target, ts.target, wRange) and ts.target then
                local CastPosition, HitChance, Position = VP:GetLineCastPosition(ts.target, 0, 60, wRange, 1100, myHero, true)
                if HitChance >= 1 and GetDistance(ts.target) <= wRange then
                        CastSpell(_W, CastPosition.x, CastPosition.z)
                        end
end
end
 
function getItemSlot()
for slot = ITEM_1, ITEM_7 do
local currentItemName = myHero:GetSpellData(slot).name
 
if currentItemName == "ItemTiamatCleave" then
Hydra = slot
elseif currentItemName  == "YoumusBlade" then
Ghostblade = slot
end
end
end
 
function fHydra()
if ValidTarget(target) then
if GetDistance(target) < 200 then
if Hydra then
if CanCast(Hydra) and Config.Combo.DoCombo then CastSpell(Hydra)
end
end
end
end
end
 
function qSpam()
if Config.Combo.DoCombo and CanCast(_Q) and ValidTarget(ts.target) then
CastSpell(_Q, ts.target)
end
end
